package org.usfirst.frc.team6636.robot;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	final String defaultAuto = "Default";
	final String customAuto = "My Auto";
	String autoSelected;
	SendableChooser<String> chooser = new SendableChooser<>();

	Spark rightLiftMotor = new Spark(3);
	Spark leftLiftMotor = new Spark(2);
	Spark leftMotor = new Spark(0);
	Spark rightMotor = new Spark(1);
	Timer timer = new Timer();	
	Joystick stick = new Joystick(0);
	Spark rightIntake = new Spark(4);
	Spark leftIntake = new Spark(5);
	Joystick xStick = new Joystick(1);

	
	

	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	@Override
	public void robotInit() {
		chooser.addDefault("Default Auto", defaultAuto);
		chooser.addObject("My Auto", customAuto);
		SmartDashboard.putData("Auto choices", chooser);
	}

	/**
	 * This autonomous (along with the chooser code above) shows how to select
	 * between different autonomous modes using the dashboard. The sendable
	 * chooser code works with the Java SmartDashboard. If you prefer the
	 * LabVIEW Dashboard, remove all of the chooser code and uncomment the
	 * getString line to get the auto name from the text box below the Gyro
	 *
	 * You can add additional auto modes by adding additional comparisons to the
	 * switch structure below with additional strings. If using the
	 * SendableChooser make sure to add them to the chooser code above as well.
	 */
	@Override
	public void autonomousInit() {
		autoSelected = chooser.getSelected();
		timer.reset();
		timer.start();

		// autoSelected = SmartDashboard.getString("Auto Selector",
		// defaultAuto);
		System.out.println("Auto selected: " + autoSelected);
	}

	/**
	 * This function is called periodically during autonomous
	 */
	@Override
	public void autonomousPeriodic() {
		
		String gameData;
		gameData = DriverStation.getInstance().getGameSpecificMessage();
		if(gameData.charAt(1) == 'R')
		{
			 if (timer.get() <= 1.0) {			 
		   		 rightMotor.set(-0.6);
		   		 leftMotor.set(0.6);
		 }
		 else if (timer.get() > 1.0 && timer.get() <= 1.41) {
			 rightMotor.set(-.5);
			 leftMotor.set(-.5);			 
		 }
		 //
		 else if (timer.get() > 1.41 && timer.get() <= 3.2) {
			 rightMotor.set(-.6);
			 leftMotor.set(.6);
		 }
		 else if (timer.get() > 3.2 && timer.get() < 3.61) {
			 rightMotor.set(.6);
			 leftMotor.set(.6);
		 }
		 else if (timer.get() > 3.61 && timer.get() <= 6.83) {
			 rightMotor.set(-.6);
			 leftMotor.set(.6);
		 }
		 else {
			 rightMotor.set(0);
			 leftMotor.set(0);

		 }
		}
		else {
			if (timer.get() <= 5.1){
			leftMotor.set(0.5);
			rightMotor.set(-0.5);
			
			}
			else{
				leftMotor.set(0);
				rightMotor.set(0);
			}
		}

		   		 
	
		    

		System.out.println(timer.get());

	
	}
	
	
	/*	This code is going to make sure that the robot travels straight
	leftMotor.setSpeed(.5);
	rightMotor.setSpeed(-.475);
	*/
		
	/* RIGHT
	if (timer.get() <= 5.4){
		leftMotor.setSpeed(.5);
		rightMotor.setSpeed(-.475);
	}
	else {
		if (timer.get() <= 5.84 && timer.get() > 5.4) {
			 rightMotor.set(-.6);
			 leftMotor.set(-.6);	
		}
		else {
			rightMotor.setSpeed(0);
			leftMotor.setSpeed(0);
		}
	}

	System.out.println(timer.get());
	}
*/
	/*
	if (timer.get() <= 5.42){
		leftMotor.setSpeed(.495);
		rightMotor.setSpeed(-.468);
	}
	else {
		if (timer.get() <= 5.84 && timer.get() > 5.42) {
			 rightMotor.set(.6);
			 leftMotor.set(.6);	
		}
		else {
			rightMotor.setSpeed(0);
			leftMotor.setSpeed(0);
		}
	}
	*/
	
	

	/**
	 * This function is called periodically during operator control
	 */
	@Override
	public void teleopPeriodic() {
		 double wheelRotation = stick.getRawAxis(2);
		 double forwardBackward = stick.getRawAxis(1);
		 double leftTrigger = xStick.getRawAxis(2);
		 double rightTrigger = xStick.getRawAxis(3);		

		 
		 
		 if (forwardBackward <= .1 && forwardBackward >= -.1){
			 rightMotor.set(wheelRotation);
			 
			 leftMotor.set(wheelRotation);
		 }
		 
		 if (wheelRotation <= .2 && wheelRotation >= -.2){
			 rightMotor.set(forwardBackward);
			 leftMotor.set((1.048)*-forwardBackward);
		 }
		 /*
		 if (stick.getRawButtonPressed(3)) {		//The arms will move up
			 rightLiftMotor.set(1);
			 leftLiftMotor.set(-1);
			 
		 }
		 else {
			 rightLiftMotor.set(0);
			 leftLiftMotor.set(0);
		 }
		 if (stick.getRawButtonPressed(5)) {		//The arms will move up
			 rightLiftMotor.set(-1);
			 leftLiftMotor.set(1);
			 
		 }
		 else {
			 rightLiftMotor.set(0);
			 leftLiftMotor.set(0);
		 }
		
		 if (leftTrigger >= 0) {
			 leftIntake.set(-leftTrigger);
		 }
		 if (rightTrigger >= 0) {
			 leftIntake.set(rightTrigger);
		 }
		 if (xStick.getRawButtonPressed(5)) {		//The arms will move up
			 leftIntake.set(.8);
		 	}
		 else {
			 leftIntake.set(0);

		 }
		 if (xStick.getRawButtonPressed(6)) {		//The arms will move up
			 rightIntake.set(-.8);
		 	}
		 else {
			 rightIntake.set(0);

		 }
			
		*/


		 
		 
		 
		 
		 
		 
		 
	}

	/**
	 * This function is called periodically during test mode
	 */
	@Override
	public void testPeriodic() {
	}
}